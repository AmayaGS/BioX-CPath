# Input arguments for tissue segmentation and patching of Whole Slide Images
input_directory: "C:/Users/Amaya/Documents/PhD/Data/Test_Data_RA/R4RA_slides"             # Input data directory
directory: "C:/Users/Amaya/Documents/PhD/Data/Test_Data_RA"                                # Results directory path
dataset_name: "RA"                                                                      # Dataset name
label: "label"                            # Name of the target label in the metadata file
patient_id: "Patient_ID"                  # Name of column containing the patient ID in the metadata file
patch_size: 224                           # Patch size (default: 224)
overlap: 0                                # Overlap (default: 0)
coverage: 0.3                             # Coverage (default: 0.3)
slide_level: 2                            # Slide level (default: 2)
mask_level: 3                             # Slide level (default: 3)
unet: false                               # Calling this parameter will result in using UNet segmentation, rather than adaptive binary thresholding
unet_weights: "/path_to_unet_weights"     # Path to model checkpoints
patch_batch_size: 10                      # Batch size (default: 10)
name_parsing: "img_name.split('.')[0]"    # String parsing to obtain patient ID from image filename
multistain: true                         # Whether the dataset contains multiple types of staining. Will generate extracted_patches.csv with stain type info.
seed: 42                                  # Random seed

# Feature vector extraction of the WSI patches and creation of embedding & graph dictionaries [rag, knn or krag]
K: 7                                      # Number of nearest neighbours in k-NNG created from WSI embeddings
embedding_vector_size: 1000               # Embedding vector size
stratified_splits: 10                     # Number of random stratified splits
embedding_net: "resnet18"                 # Feature extraction network used
train_fraction: 0.7                       # Train fraction
graph_mode: "krag"                        # Change type of graph used for training here
n_classes: 2                              # Number of classes
slide_batch: 1                            # Slide batch size - default 1
num_workers: 0                            # Number of workers for data loading
stain_type: "all"                         # Type of stain used.

# Pre-compute Random Walk positional encoding on the graph
encoding_size: 20                         # Size Random Walk positional encoding

# Self-attention graph multiple instance learning for Whole Slide Image set classification at the patient level
hidden_dim: 512                           # Size of hidden network dimension
convolution: "GAT"                        # Change type of graph convolution used
attention: false                          # Add attention mechanism to the GNN
positional_encoding: true                 # Add Random Walk positional encoding to the graph
learning_rate: 0.00001                    # Learning rate
pooling_ratio: 0.7                        # Pooling ratio
heads: 2                                  # Number of GAT heads
num_epochs: 1                             # Number of training epochs
batch_size: 1                             # Graph batch size for training
scheduler: 1                              # Learning rate schedule
checkpoint: true                          # Enables checkpointing of GNN weights.
l1_norm: 0.00001                          # L1-norm to regularise loss function

# Heatmap generation for WSI
path_to_patches: "/data/scratch/wpw030/KRAG/results/patches/"   # Location of patches
heatmap_path: "/data/scratch/wpw030/KRAG/results/heatmaps/"      # Location of saved heatmap figs
checkpoint_weights: "/data/scratch/wpw030/KRAG/"                 # Location of trained model weights.
test_fold: "Fold_9"                       # Test fold
test_ids: false                           # Specific IDs to create heatmap on, rather than test fold.
slide_name: ['test_016', 'test_071', 'test_102']   # name of slides which to create heatmap for.
per_layer: false                          # If called, will create heatmaps for each layer of the GNN.

# General arguments to determine if running preprocessing or training
preprocess: true                         # Run tissue segmentation, patching of WSI, embed feature vectors, graph creation & compute RWPE.
segmentation: false                       # Run tissue segmentation of WSI
embedding: false                          # Run feature vector extraction of the WSI patches and creation of embedding & graph dictionaries [rag, knn or krag]
compute_rwpe: false                       # Run pre-compute of Random Walk positional encoding on the graph
train: false                              # Run training
heatmap: false                            # Run heatmap generation for WSI, for each layer of the GNN or all together.